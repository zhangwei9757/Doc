ALT + 1 显隐工程栏
Alt + F7 Find Usages
Ctrl + B 在定义和申明之间跳转
Ctrl + Shift + Backspace 回到最后编辑的地方
Ctrl + O 选取需要重写的方法
Ctrl + Q 快速查看文档
Ctrl + P 提示参数信息
Ctrl + E 查看最近浏览的文件
Ctrl + Alt + B 查看接口、抽象类的实现类
Ctrl + Shift + N 找文件
Ctrl + F7 找到某个类、变量、函数等在文中被使用到的的地方
Ctrl + Alt + 7 查看类、对象、变量使用的地方
Ctrl + Alt + -/+ 展开折叠当前函数、类
Ctrl + Shift + -/+ 展开折叠所有函数、类
Ctrl + Shift + 空格 提示信息（new后直接键入构造器、构造器内提供构造信息）

jdbc:oracle:thin:@IP:Port:xxxxxx

git config http.proxy "http://10.28.124.2:31151"
git config https.proxy "https://10.28.124.2:31151"

git config --unset http.proxy
git config --unset https.proxy

git config http.postBuffer 524288000
git config --global http.postBuffer 524288000

git config --global --unset http.proxy
git config --global --unset https.proxy

git config --global http.proxy http://10.28.124.2:31151
git config --global https.proxy https://10.28.124.2:31151

netstat -aon|findstr "8080"
taskkill /pid 4136-t -f

//获取指定名称参数的值
function GetUrlParam(paraName) {
    var url = document.location.toString();
    var arrObj = url.split("?");

    if (arrObj.length > 1) {
        var arrPara = arrObj[1].split("&");
        var arr;

        for (var i = 0; i < arrPara.length; i++) {
            arr = arrPara[i].split("=");
            if (arr != null && arr[0] == paraName) {
                return arr[1];
            }
        }
        return "";
    } else {
        return "";
    }
}

-Dfile.encoding=UTF-8

查看分支：				git branch
创建分支：				git branch <name>
切换分支：				git checkout <name>
创建+切换分支：			git checkout -b <name>
合并某分支到当前分支：	git merge <name>
删除分支：				git branch -d <name>
查看日志合并：			git log --graph --pretty=oneline --abbrev-commit


使用python和js做的基于Web的SSH工具 webssh，可以从下面地址了解详情。
https://github.com/huashengdun/webssh
https://pypi.org/project/webssh/

pip install webssh

# 直接运行wssh，使用默认8888端口
wssh

# 通过绑定IP地址和端口启动
wssh --address='192.168.0.123' --port=8888
wssh --address='0.0.0.0' --port=8888

# 通过绑定IP地址和端口启动，只允许本地地址访问
wssh --address='127.0.0.1' --port=8888

mvn install:install-file -Dfile=gavin-2.0.1.jar -DgroupId=com.gavin -DartifactId=gavin -Dversion=2.0.1 -Dpackaging=jar


注意：LocalDateTime是带时分秒的
1.将LocalDateTime转为自定义的时间格式的字符串

public static String getDateTimeAsString(LocalDateTime localDateTime, String format) {
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);
    return localDateTime.format(formatter);
}
2.将long类型的timestamp转为LocalDateTime

public static LocalDateTime getDateTimeOfTimestamp(long timestamp) {
    Instant instant = Instant.ofEpochMilli(timestamp);
    ZoneId zone = ZoneId.systemDefault();
    return LocalDateTime.ofInstant(instant, zone);
}
3.将LocalDateTime转为long类型的timestamp

public static long getTimestampOfDateTime(LocalDateTime localDateTime) {
    ZoneId zone = ZoneId.systemDefault();
    Instant instant = localDateTime.atZone(zone).toInstant();
    return instant.toEpochMilli();
}
4.将某时间字符串转为自定义时间格式的LocalDateTime

public static LocalDateTime parseStringToDateTime(String time, String format) {
    DateTimeFormatter df = DateTimeFormatter.ofPattern(format);
    return LocalDateTime.parse(time, df);
}


-------------------------------------------------------------------------------
timed-out and no fallback available：

这个错误基本是出现在Hystrix熔断器，熔断器的作用是判断该服务能不能通，如果通了就不管了，调用在指定时间内超时时，就会通过熔断器进行错误返回。

一般设置如下配置的其中一个即可：

1、把时间设长

这里设置5秒

hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000  
2、把超时发生异常属性关闭

hystrix.command.default.execution.timeout.enabled=false  
3、禁用feign的hystrix 

feign.hystrix.enabled: false  
failed and no fallback available：

而通过上面设置只是针对熔断器的错误关闭，并不能解决根本问题，比如Feign客户端调用远程服务时，默认为8秒超时时间，如果在规定时间内没有返回，同样会跳转到熔断器进行处理。即使关闭了熔断器的错误，但是总的错误处理还会是有这个问题出现。

那么要解决根本问题，就要从请求超时时间入手，因为有些服务可能存在调用时间长的问题，所以直接配置：

ribbon.ReadTimeout=60000
ribbon.ConnectTimeout=60000
这些才是真正解决请求超时的问题，如果不设置这个，被调用接口很慢时，会出现Read Timeout on Request。

而针对调用失败重试的次数也可以设置：

ribbon.maxAutoRetries=0

--------------------------------------------------------------------------------------
@JsonFormat后台到前台的时间格式的转换
@DataFormAT前后到后台的时间格式的转换

1.@JsonFormat(pattern="yyyy-MM-dd HH:mm:ss",timezone = "GMT+8")
pattern:需要转换的时间日期的格式
timezone：是时间设置为东八区

2.@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
pattern:需要转换的时间日期的格式

3.例子
/*俩个注解可以同时使用*/
@ApiModelProperty("创建时间") @JsonFormat(pattern="yyyy-MM-dd HH:mm:ss",timezone = "GMT+8") @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") private Date createdDate ;
