目录:
    PHP安装
	Centos7 必备安装及 Nginx安装，
	如何开启mysql日志？时区？
	配置mysql一主多从
	docker启动 mysql,gogs容器映射宿主机端口
	docker启动 nexus, gogs
	多主多从配置mysql
	Ubuntu 安装docker
	Nexus Maven私服配置
	Nexus Docker私服配置

软件包									说 明											下载地址
httpd-2.4.7.tar.gz						Apache 包										http://www.apache.org/
mysql-5.5.23.tar.gz						MySQL数据库										http://dev.mysql.com/downloads/
php-5.4.25.tar.gz						PHP语言											http://www.php.net/downloads.php
phpMyAdmin-4.1.4-all-languages.iar.gz	Web方式的MySQL管理工具							http://www.phpmyadmin.com/
libxml2_2.9.1.tar.gz					用来解析XML文档的函数库							http://www.linuxfromscratch.org/blfs/view/svn/general/libxml2.html
libmerypt-2.5.8.tar.gz					加密算法扩展库									http://prdownloads.sourceforge.net/mcrypt/libmcrypt-2.5.8.tar.gz?use_mirror=peterhost
mhash-0.9.9.9.tar.gz					加密算法扩展库									http://sourceforge.net/projects/mhash/files/mhash/0.9.9.9/
mcrypt-2-6.8-tar.gz						加密算法扩展库									http://sourceforge.net/projects/mcrypt/files/MCrypt/2.6.8/
zlib-1.2.3.tar.gz						数据压缩函数库									http://www.zlib.net/
gd-2.0.35.tar.gz						PHP处理用形的扩展库								https://bitbucket.org/libgd/gd-libgd/downloads
freetype-2.3.5-tar-gz					字体引擎库										http://download.savannah.gnu.org/releases/freetype/
libpng-1.2.31.tar.gz					用于解码.png格式的图片							ftp://ftp.simplesystems.org/pub/libpng/png/src/
jpegsrc.v6b.tar.gz						用于解码.jpg和.jpeg格式的图片					http://www.ijg.org/files/jpegsrc.v6b.tar.gz
apr-1.4.6.tar.gz						Apache支持镆块									http://archive.apache.org/dist/apr/
apr-util-1.4.1.tar.gz					Apache支持模块									http://archive.apache.org/dist/apr/
pcre-8.34.tar.gz						Apache支持模块，使Apache支持pcre正则表达式规则	http://sourceforge.net/projects/pcre/files/pcre/8.34/pcre-8.34.tar.gz/stats/map
ncurses-5.9.tar.gz						使应用程序直接控制终端屏幕显示的函数库			http://ftp.gnu.org/pub/gnu/ncurses/
memcache-3.0.8.tgz						memcache函数库（客户端）						http://pecl.php.net/package/memcache
memcached-1.4.17.tar.gz					memcached服务器端								http://memcached.org/
------------------------------------------------------------------------------------------------------------------------------------
-1.【Centos7 PHP apache安装】
    参考文章:http://c.biancheng.net/view/1113.html
	
    https://www.php.net/downloads.php
	yum -y install libxml2-devel openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel
	https://sourceforge.net/projects/mcrypt/files/MCrypt/2.6.8/mcrypt-2.6.8.tar.gz/download
	https://sourceforge.net/projects/mcrypt
	
	 ./configure --prefix=/usr/local/php --enable-fpm \ 
	--with-zlib --enable-zip --enable-mbstring --with- mcrypt --with-mysql \ 
	--with-mysqli --with-pdo-mysql --with-gd --with-jpeg-dir --with-png-dir \ 
	--with-freetype-dir --with-curl --with-openssl --with-mhash --enable-bcmath \ 
	--enable-opcache 
	
	openssl genrsa -out server.key 2048
	openssl req -new -key server.key  -out server.csr
	openssl x509 -req -days 30 -in server.csr  -signkey server.key  -out server.crt
	
	server {
		listen 443 ssl;
		server_name          www.zhangwei.com; #修改一下域名
		ssl_certificate cert.pem;              #这里是证书文件
		ssl_certificate_key cert.key; 		   #这里是私钥文件
		 
		ssl_session_cache shared:SSL:1m;
		ssl_session_timeout 5m;
		 
		ssl_ciphers HIGH:!aNULL:!MD5;
		ssl_prefer_server_ciphers on;
		 
		location / {
			root html/ssl;
			index ssl.html index.html index.htm;
	  }
	}
	
	yum -y install libnl libnl-devel
	
0.【Centos7 必备安装及 Nginx安装】
	0.1:编译安装Nginx
	yum -y install gcc gcc-c++ wget ntpdate pcre-devel openssl-devel expat-devel tree libnl libnl-devel

	wget http://nginx.org/download/nginx-1.10.1.tar.gz
	tar -zxvf nginx-1.10.1.tar.gz 
	cd nginx-1.10.1/
	./configure --prefix=/usr/local/nginx --with-http_ssl_module
	make && make install
	cd /usr/local/nginx/sbin
	./nginx
	ps aux | grep nginx
	netstat -ntlp
	iptables -I INPUT -p tcp --dport 80 -j ACCEPT 
	service iptables status
	serivce iptables save
	serivce iptables restart
	ln -s /usr/1ocal/nginx/sbin/nginx /usr/1ocal/sbin/nginx
	chkconfig [--add] [--del] [--list] ［系统服务］
	
	1）立即停止服务
	./nginx -s stop
	2）立即停止服务
	./nginx -s quit
	3）通过 kill 或者 killall 命令杀死进程
	kill pid
	killall nginx
	
	nginx -s load 						在Nginx 已经启动的情况下重新加载配置文件（平滑重启）
	ngmx -s reopen 						重新打开日志文件
	nginx -c /特定目录/nginx.conf 		以特定目录下的配置文件启动 Nginx
	nginx -t 							检测当前配置文件是否正确
	nginx -t -c /特定日录/nginx.conf 	检测特定目录下的 Nginx 配置文件是否正确
	ngtnx -v 							显示版本信息
	nginx -V 							显示版本信息和编译选项
	

1.【如何开启mysql日志？时区？】
	SHOW VARIABLES LIKE '%log_bin%';
	SHOW VARIABLES LIKE '%zone%';
	找到my,cnf 中 [mysqld]  添加如下

[mysqld]
# binlog 配置
log-bin=/var/lib/mysql/mysql-bin
expire-logs-days=14
max-binlog-size=500M
server-id=3306
lower_case_table_names=1

#relay_log=/var/lib/mysql/mysql-relay-bin
#read_only=1
	
	如果没有my.cnf  或者是集成的环境 找到my.ini 中 [mysqld]  添加如下
	 
[mysqld]
# binlog 配置
default-time-zone='+8:00'
log-bin = /usr/local/var/mysql/logs/mysql-bin.log
expire-logs-days = 14
max-binlog-size = 500M
server-id = 1
lower_case_table_names=1

#relay_log=/var/lib/mysql/mysql-relay-bin
#read_only=1
	 
	重启mysql后    SHOW VARIABLES LIKE '%log_bin%';  Value 为 ON即可

2.【配置mysql一主多从】
	SHOW MASTER STATUS;

	STOP SLAVE;
	RESET SLAVE;
	CHANGE MASTER TO MASTER_HOST='192.168.25.11',
	MASTER_PORT=3306,
	MASTER_USER='rep_user',
	MASTER_PASSWORD='123456',
	MASTER_LOG_FILE='mysql-bin.000001',
	MASTER_LOG_POS=322;
	START SLAVE;

	USE mysql
	SELECT USER,HOST FROM USER WHERE USER = 'root'

	CREATE DATABASE db1;
	USE db1;
	CREATE TABLE t_user(id INT,NAME VARCHAR(64), UUID VARCHAR(64), lastime DATETIME);
	INSERT INTO t_user(id,NAME,UUID,lastime) VALUES(1,'Moxiao',UUID(),NOW());

	mysql> CREATE USER 'zw'@'%' IDENTIFIED BY '123456';#创建用户
	mysql> GRANT REPLICATION SLAVE ON *.* TO 'zw'@'%'; #分配权限
	mysql>FLUSH PRIVILEGES;   						   #刷新权限

3.【docker启动 mysql,gogs容器映射宿主机端口】
>>>正确
	docker run --name mysql3307 -e MYSQL_ROOT_PASSWORD=yellow_2019 -v /docker/mysql3307/conf:/etc/mysql/conf.d -v /docker/mysql3307/logs:/logs -v /docker/mysql3307/data:/var/lib/mysql -p 3307:3306 -d mysql:5.7.20
	docker run --name mysql3308 -e MYSQL_ROOT_PASSWORD=yellow_2019 -v /docker/mysql3308/conf:/etc/mysql/conf.d -v /docker/mysql3308/logs:/logs -v /docker/mysql3308/data:/var/lib/mysql -p 3308:3306 -d mysql:5.7.20
	docker run --name mysql3309 -e MYSQL_ROOT_PASSWORD=yellow_2019 -v /docker/mysql3309/conf:/etc/mysql/conf.d -v /docker/mysql3309/logs:/logs -v /docker/mysql3309/data:/var/lib/mysql -p 3309:3306 -d mysql:5.7.20
>>>
	docker run -p 3306:3306 --name mysql3306 --restart always --privileged=true -v /docker/mysql3306/conf:/etc/mysql/conf.d -v /docker/mysql3306/logs:/logs -v /docker/mysql3306/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=yellow_2019 -d mysql:5.7.20
	docker run -p 3307:3306 --name mysql3307 --restart always --privileged=true -v /docker/mysql3307/conf:/etc/mysql/conf.d -v /docker/mysql3307/logs:/logs -v /docker/mysql3307/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=yellow_2019 -d mysql:5.7.20
	docker run -p 3308:3306 --name mysql3308 --restart always --privileged=true -v /docker/mysql3308/conf:/etc/mysql/conf.d -v /docker/mysql3308/logs:/logs -v /docker/mysql3308/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=yellow_2019 -d mysql:5.7.20
	docker run -p 3309:3306 --name mysql3309 --restart always --privileged=true -v /docker/mysql3309/conf:/etc/mysql/conf.d -v /docker/mysql3309/logs:/logs -v /docker/mysql3309/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=yellow_2019 -d mysql:5.7.20
	
	docker run -p 3309:3306 --name mysql3309 --restart always --privileged=true -v /zzyyuse/mysql3309/conf:/etc/mysql/conf.d -v /zzyyuse/mysql3309/logs:/logs -v /zzyyuse/mysql3309/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=yellow_2019 -d mysql:5.7.20
	docker run -p 3306:3306 --name mysql     --restart always --privileged=true -v /tpdata/mysql/conf:/etc/mysql/conf.d     -v /tpdata/mysql/logs:/logs     -v /tpdata/mysql/data:/var/lib/mysql     -e MYSQL_ROOT_PASSWORD=yellow_2019 -d mysql:5.7.20
	docker run -p 3306:3306 --name mysql     --restart always --privileged=true -v /tpsys/mysql/conf:/etc/mysql/conf.d     -v /tpsys/mysql/logs:/logs     -v /tpsys/mysql/data:/var/lib/mysql     -e MYSQL_ROOT_PASSWORD=zhousir_0301 -d mysql:5.7.20
	docker run -d -p 8089:3000 --name=server-redmine -e MYSQL_ROOT_PASSWORD="zhousir_0301" --link mysql:mysql -v /tpsys/redmine/redmine:/usr/src/redmine/files redmine
	docker run -d -p 3000:3000 --name=server-redmine -e MYSQL_ROOT_PASSWORD="123456" --link mysql3306:mysql -v /docker/redmine/redmine:/usr/src/redmine/files redmine
	docker run -d -p 8080:8080 --name tomcat --privileged=true -v /zhangwei/tomcat:/usr/local/tomcat tomcat

	
	在宿主机上该目录下：/data/mysql/conf创建一个mysql.cnf
	/data/mysql/conf/mysql.cnf添加如下内容
--------------------此处有效
[mysqld]
character-set-server=utf8
lower_case_table_names=1
log-bin=/var/lib/mysql/mysql-bin
default-time-zone='+8:00'
server-id=3306

#relay_log=/var/lib/mysql/mysql-relay-bin【从库】
#read_only=1							 【从库】
--------------------此处有效


4.【docker启动 nexus】,【docker启动 gogs】
	docker run -d -p 8081:8081 -p 8082:8082 --name nexus --restart=always -v /tpsys/nexus/nexus-data:/nexus-data sonatype/nexus3 
	
	docker run -d -p 10022:22  -p 13000:3000 --name gogs --net=backend -v /docker/gogs/:/data --restart unless-stopped gogs/gogs
	
	create database gogs character set utf8 collate utf8_bin;

5.【多主多从配置mysql】

     5.1:所有主从mysql基本配置如下
     5.2:配置my.cnf文件
	 
[client]
port=3306
socket=/usr/local/mysql-5.7.18/data/3306/mysql.sock
default-character-set=utf8

[mysqld]
port=3306
socket=/usr/local/mysql-5.7.18/data/3306/mysql.sock
datadir=/usr/local/mysql-5.7.18/data/3306
log-error=/usr/local/mysql-5.7.18/data/3306/error.log
pid-file=/usr/local/mysql-5.7.18/data/3306/mysql.pid

default-time-zone='+8:00'
character-set-server=utf8
lower_case_table_names=1
autocommit=1

server-id=3306     #【主从库】
log-bin=mysql-bin  #【从库】

--------------------此处有效
第一台主服务器3307的my.cnf文件增加如下配置：(Master主 3307)
auto_increment_increment=2
auto_increment_offset=1
log-slave-updates
sync_binlog=1

第二台主服务器3308的my.cnf文件增加如下配置：(Master从 3308)
auto_increment_increment=2
auto_increment_offset=2
log-slave-updates
sync_binlog=1

	5.5:配置项说明:
auto_increment_increment 控制主键自增的自增步长，用于防止Master与Master之间复制出现重复自增字段值，通常auto_increment_increment=n，有多少台主服务器，n 就设置为多少；
auto_increment_offset＝1 设置自增起始值，这里设置为1，这样Master的auto_increment字段产生的数值是：1, 3, 5, 7, …等奇数ID

注意auto_increment_offset的设置，不同的master设置不应该一样，否则就容易引起主键冲突，比如master1的offset=1，则master2的offset=2，master3的offset=3
在双主模式中，log-slave-updates 配置项一定要配置，否则在master1（3307）上进行了更新数据，在master2（3308）和slave1（3309）上会更新，但是在slave2（3310）上不会更新 
sync_binlog表示每几次事务提交，MySQL把binlog缓存刷进日志文件中，默认是0，最安全的是设置为1；

3306 3307 3308 3309
3306 >> 3307,3308
3307 >> 3306,3309
--------------------此处有效

====================================================== 【Ubuntu 安装docker】 ======================================================
https://blog.csdn.net/wangxiong2010/article/details/79178588

一、准备工作

       1、打开官网（点击打开链接），发现有社区版与企业版，我们选择安装社区版本（CE）官方文档。

       2、一个ubuntu系统环境

二、安装部署

      1、卸载老版本docker(如果系统已安装docker环境)

     $ sudo apt-get remove docker docker-engine docker.io

      2、安装docker环境

            2.1 更新apt源 
      $ sudo apt-get update
      
            2.2 安装apt https 依赖包
      $ sudo apt-get install \
          apt-transport-https \
          ca-certificates \
          curl \
         software-properties-common

          2.3 添加docker官方的GPG key
     $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
     $ sudo apt-key fingerprint 0EBFCD88

pub 4096R/0EBFCD88 2017-02-22
  Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88
uid Docker Release (CE deb) <docker@docker.com>
sub 4096R/F273FCD8 2017-02-22

      2.4 添加apt docker stable 版本（稳定版本）源
     $ sudo add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
       $(lsb_release -cs) \
       stable"
       
          2.5 再次更新源
      $ sudo apt-get update
 
 2.6 安装docker-ce( 可指定版本 )
     //列出可用版本
       $ sudo apt-cache madison docker-ce
     //执行安装
       $ sudo apt-get install docker-ce 或 $ sudo apt-get install docker-ce 版本号






====================================================== 【Nexus Maven私服配置】 ======================================================
https://www.ctolib.com/amp/topics-141584.html

仓库名称		类型	格式	说明
maven-central	proxy	maven2	中央仓库
maven-releases	hosted	maven2	正式版仓库
maven-snapshots	hosted	maven2	测试版仓库
maven-public	group	maven2	仓库组，集合了其他三个仓库

1.配置 Maven 并发布
修改文件 ~/.m2/settings.xml ，增加：
	<servers>
		<!-- 增加服务器账户和密码 mynexus -->
		<server>
			<id>mynexus</id>
			<username>user</username>
			<password>password</password>
		</server>
	</servers>

2.修改 pom.xml 文件：
	<repositories>
		<!-- 下载仓库使用 maven-public -->
		<repository>
			<id>mynexus</id>
			<url>http://localhost:8081/repository/maven-public/</url>
		</repository>
	</repositories>

	<distributionManagement>
		 <!-- 发布正式版本仓库使用 maven-releases -->
		<repository>
			<id>mynexus</id>
			<url>http://localhost:8081/repository/maven-releases/</url>
		</repository>

		 <!-- 发布测试版本仓库使用 maven-snapshots -->
		<snapshotRepository>
			<id>mynexus</id>
			<url>http://localhost:8081/repository/maven-snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

3.然后执行 mvn deploy 部署项目，如果控制台打印出 BUILD SUCCESS 则表示发布成功，
可以通过 http://hostIP:port/#browse/browse:maven-public 确认仓库上是否有新发布的代码包。






====================================================== 【Nexus Docker私服配置】 ======================================================
https://www.jianshu.com/p/ecc4d430f992
https://blog.csdn.net/u013165156/article/details/98879711
https://blog.csdn.net/supertor/article/details/83146596

国内镜像
https://mirrors.tuna.tsinghua.edu.cn/help/docker/

属性	说明
proxy	即你可以设置代理，设置了代理之后，在你的nexus中找不到的依赖就会去配置的代理的地址中找
hosted	你可以上传你自己的项目到这里面
group	它可以包含前面两个，是一个聚合体。一般用来给客户一个访问nexus的统一地址。简单的说，
		就是你可以上传私有的项目到hosted，以及配置proxy以获取第三方的依赖（比如可以配置中央仓库的地址）。
		前面两个都弄好了之后，在通过group聚合给客户提供统一的访问地址



使用docker搭建nexus并配置docker私有仓库
1.搭建
Nexus是用于Maven私服的，不过在官网上发现最新的Nexus 3.x还支持Docker仓库了，所以使用docker来搭建一下Nexus

2.查找镜像
docker search nexus

3.选取使用次数较多是镜像 拉取镜像
docker pull sonatype/nexus3

4.查看拉取的镜像
docker images

5.启动容器
docker run -d --name nexus3 --restart=always -p 8081:8081 -p 8082:8082 -p 8083:8083 -p 8084:8084 -p 8085:8085 -v /opt/nexus-data:/nexus-data sonatype/nexus3

6.查看容器日志
docker logs nexus3

7.登录配置
确保正常启动后 使用浏览器访问http://服务器ip:8081

8.点击右上角登录 账号密码：admin/admin123
登录后点击设置界面 选择Repositories，点击Create repository，如图所示
https://upload-images.jianshu.io/upload_images/1930101-4728b97975ef6d5e.jpg?imageMogr2/auto-orient/

9.选择仓库类型 这里选择hosted类型 如图
https://upload-images.jianshu.io/upload_images/1930101-91af1c6709883f0d.jpg?imageMogr2/auto-orient/

10.配置仓库
该仓库指定一个唯一的名称、HTTP的端口、允许交互的API等
https://upload-images.jianshu.io/upload_images/1930101-98d7e336d7aff8e9.jpg?imageMogr2/auto-orient/

11.连接仓库
其他机器需要连接仓库才能进行push、pull等操作

连接仓库前需要进行配置 vim /etc/docker/daemon.json

    {
		"insecure-registries": ["172.16.77.71:8082" ]
    }

    systemctl daemon-reload
    systemctl restart docker

12.登录仓库
docker login -u admin -p admin123 172.16.77.71:8082  #注意这里的端口是配置仓库时选择的端口号

13.上传镜像
docker tag nginx:latest 172.16.77.71:8082/nginx:0.1
docker push 172.16.77.71:8082/nginx:0.1

14.拉取镜像
docker pull 172.16.77.71:8082/nginx:0.1

15.搜索镜像
[root@k8s-77-40 torch]# docker search 172.16.77.71:8082/nginx

NAME                          DESCRIPTION         STARS               OFFICIAL              AUTOMATED

172.16.77.71:8082/nginx:0.1                       0

总结
到此，使用nexus搭建的docker私有仓库配置完毕。公司常用的镜像可以存放在私有仓库里 毕竟官方的dockerhub太慢


