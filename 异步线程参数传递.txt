参考网址: https://www.jianshu.com/p/44e6d04c7910
====================================== spring Boot使用ThreadLocal、InheritableThreadLocal、TransmittableThreadLocal -2 ======================================


@Configuration
//@EnableAsync//开启注解：开启异步支持
public class ThreadPool {

    private static final int CORE_POOL_SIZE = Runtime.getRuntime().availableProcessors() *2;
    private static final int MAX_POOL_SIZE = CORE_POOL_SIZE *4 <256 ? 256 : CORE_POOL_SIZE * 4;
    private static final int KEEP_ALIVE_TIME = 10; //允许线程空闲时间（单位为秒）
    private static final int QUEUE_CAPACITY = 200; // 缓冲队列数
    private static final int AWAIT_TERMINATION = 60;//线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁
    private static final Boolean WAIT_FOR_TASKS_TO_COMPLETE_ON_SHUTDOWN = true;//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean
    private static final String THREAD_NAME_PREFIX = "PiceaAsync-Service-"; // 线程池名前缀

    /**
     * <p>"@Bean("piceaTaskExecutor")，Bean后面的（）内容可以省略
     * 如果省略则使用方法名<p>
     * @author jiangbing.yang
     * @date   2019/3/27 11:07
     * @params
     * @return
     * @throws
     */

    @Bean("piceaTaskExecutor")
    public static ThreadPoolTaskExecutorpiceaTaskExecutor () {
        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();
        taskExecutor.setCorePoolSize(2);
        taskExecutor.setMaxPoolSize(2);
        taskExecutor.setKeepAliveSeconds(KEEP_ALIVE_TIME);
        taskExecutor.setQueueCapacity(QUEUE_CAPACITY);
        taskExecutor.setThreadNamePrefix(THREAD_NAME_PREFIX);
        taskExecutor.setWaitForTasksToCompleteOnShutdown(WAIT_FOR_TASKS_TO_COMPLETE_ON_SHUTDOWN);
        taskExecutor.setAwaitTerminationSeconds(AWAIT_TERMINATION);
        // 线程池对拒绝任务的处理策略
        taskExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        // 初始化
        taskExecutor.initialize();
//        return taskExecutor;
        return TtlExecutors.getTtlExecutor(taskExecutor);
    }
}




public class ThreadLocalUtil {
    public static final ThreadLocal<String> THREAD_LOCAL = new ThreadLocal<>();
    //设置线程需要保存的值
    public static void setValue (String str) {
        THREAD_LOCAL.set(str);
    }
    //获取线程中保存的值
    public static String getValue() {
        return THREAD_LOCAL.get();
    }
    //移除线程中保存的值
    public static void remove() {
        THREAD_LOCAL.remove();
    }
}




public class InheritableThreadLocalUtil {
    public static final InheritableThreadLocal<String> THREAD_LOCAL = new InheritableThreadLocal<>();
    //设置线程需要保存的值
    public static void setValue (String str) {
        THREAD_LOCAL.set(str);
    }
    //获取线程中保存的值
    public static String getValue() {
        return THREAD_LOCAL.get();
    }
    //移除线程中保存的值
    public static void remove() {
        THREAD_LOCAL.remove();
    }
}



public class TransmittableThreadLocalUtil {
    public static final TransmittableThreadLocal<String> THREAD_LOCAL = new TransmittableThreadLocal<>();
    //设置线程需要保存的值
    public static void setValue (String str) {
        THREAD_LOCAL.set(str);
    }
    //获取线程中保存的值
    public static String getValue() {
        return THREAD_LOCAL.get();
    }
    //移除线程中保存的值
    public static void remove() {
        THREAD_LOCAL.remove();
    }
}



