centos7 docker version运行异常解决方案：
https://blog.csdn.net/fenglailea/article/details/82290753

sudo vim /etc/profile.d/docker.sh
export DOCKER_HOST=tcp://localhost:2375 
source /etc/profile
source /etc/bashrc
sudo vim /lib/systemd/system/docker.service
将
ExecStart=/usr/bin/dockerd
修改为
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock -H tcp://0.0.0.0:7654
2375 是管理端口 
7654 是备用端口
sudo systemctl daemon-reload 
sudo systemctl restart docker.service
docker version

https://cr.console.aliyun.com/cn-shanghai/mirrors
https://cr.console.aliyun.com/cn-hangzhou/mirrors
镜像加速器

https://ejkw9vvr.mirror.aliyuncs.com
加速器地址(专属)



以下为使用阿里云镜像加速
=================(centos6.8配置)=====================
cat /etc/redhat-release

yum install -y epel-release
yum install -y docker-io
安装后的docker配置文件 /etc/sysconfig/docker
service docker start
docker version

第一步
vim /etc/sysconfig/docker
第二步添加
other_args="--registry-mirror=https://ejkw9vvr.mirror.aliyuncs.com"



=================(centos7 ++配置)====================
cat /etc/redhat-release  确定你是CentOS7及以上版本

yum -y install gcc       yum安装gcc相关
yum -y install gcc-c++

yum -y remove docker docker-common docker-selinux docker-engine  卸载旧版本
yum remove docker \
                 docker-client \
                 docker-client-latest \
                 docker-common \
                 docker-latest \
                 docker-latest-logrotate \
                 docker-logrotate \
                 docker-selinux \
                 docker-engine-selinux \
                 docker-engine
				 
yum install -y yum-utils device-mapper-persistent-data lvm2  安装需要的软件包
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 设置stable镜像仓库
yum makecache fast  更新yum软件包索引
yum -y install docker-ce  安装DOCKER CE
systemctl start docker  启动docker

docker version    测试
docker run hello-world
				 
第一步
mkdir -p /etc/docker
vim /etc/docker/daemon.json
第二步添加
{
  "registry-mirrors": ["https://ejkw9vvr.mirror.aliyuncs.com"]
}
第三步
sudo systemctl daemon-reload
第四步
sudo systemctl restart docker

卸载步骤：
systemctl stop docker     
yum -y remove docker-ce
rm -rf /var/lib/docker


====================Docker命令====================
重新启动Docker后台服务：service docker restart
docker info 
docker version
docker --help

docker images 列出本地所有镜像
	REPOSITORY 镜像源
	TAG 镜像标签 默认 latest
	IMAGE ID 镜像id
	CREATED 创建时间
	SIZE 镜像大小

	-a 列出所有镜像包含中间映像层
	-l 显示最近创建的容器
	-n 显示最近n个创建的容器
	-q 静默模式，只显示镜像ID
	--digests 显示镜像摘要信息
 	--no-trunc 不截断输出，显示完整的镜像信息
	
	
docker search xxx  查找镜像
docker pull xxx    拉取镜像
docker rmi xxx     删除某个镜像
docker rmi -f xxx     强制删除某个镜像
docker rmi -f xxx xxx    删除多个镜像

docker rmi -f $(docker images -qa) 批量删除



===================容器命令=======================
docker pull centos

docker run [options] image [command] [ars......]
	--name="容器新的名字"
	-d 后台运行，并返回容器id,守护式容器
	-i 以交互模式运行容器，通常与-t同时使用
	-t 为容器重新分配一个伪输入终端， 通常与-i同时使用
	-P 随机端口映射
	-p 指定端口映射
	  ip:hostPort:containerPort
      ip::containerPort
      hostPort:containerPort
      containerPort

docker run -it 镜像id 
docker run -it 镜像id  --name="新的名字"
docker run -it  --name mycentos0116 centos

docker ps [options] 
	-a 列出所有运行的容器,列出所有镜像包含中间映像层
	-l 显示最近创建的容器
	-n 显示最近n个创建的容器
	-q 静默模式，只显示镜像ID
	--digests 显示镜像摘要信息
 	--no-trunc 不截断输出，显示完整的镜像信息

exit          容器强行退出
ctrl + P + Q  容器后台运行，并退出

docker start   容器ID
docker restart 容器ID或者容器名
docker stop    容器ID
docker kill    容器ID

docker rm    容器ID
docker rm -f 容器ID

docker rm -f $(docker ps -a -q)           一次性删除多个容器
docker ps -a -q | xargs dcoker rm         一次性删除多个容器




docker run -d 容器名 启动守护式容器

docker logs -f -t --tail 容器ID   查看容器日志
	*  -t 是加入时间戳
	*  -f 跟随最新的日志打印
	*  --tail 数字 显示最后多少条

docker top     容器ID  查看容器内运行的进程
docker inspect 容器ID  查看容器内部细节
docker exec -it 容器ID  bashShell

docker attach   容器ID                  attach 直接进入容器启动命令的终端，不会启动新的进程
docker exec -t fdc4228a1362 ls -l /tmp  exec   是在容器中打开新的终端，并且可以启动新的进程
docker exec -t fdc4228a1362 /bin/bash   

docker cp 容器ID      :容器内路径   目的主机路径   从容器内拷贝文件到主机上
docker cp fe12d23eb5cb:/tmp/yum.log /root


常用命令如下：
attach  Attach to a running container               # 当前 shell 下 attach 连接指定运行镜像
build   Build an image from a Dockerfile            # 通过 Dockerfile 定制镜像
commit  Create a new image from a container changes # 提交当前容器为新的镜像
cp      Copy files/folders from the containers filesystem to the host path #从容器中拷贝指定文件或者目录到宿主机中
create  Create a new container                      # 创建一个新的容器，同 run，但不启动容器
diff    Inspect changes on a container's filesystem # 查看 docker 容器变化
events  Get real time events from the server        # 从 docker 服务获取容器实时事件
exec    Run a command in an existing container      # 在已存在的容器上运行命令
export  Stream the contents of a container as a tar archive # 导出容器的内容流作为一个 tar 归档文件[对应 import ]
history Show the history of an image                # 展示一个镜像形成历史
images  List images                                 # 列出系统当前镜像
import  Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]
info    Display system-wide information             # 显示系统相关信息
inspect Return low-level information on a container # 查看容器详细信息
kill    Kill a running container                    # kill 指定 docker 容器
load    Load an image from a tar archive            # 从一个 tar 包中加载一个镜像[对应 save]
login   Register or Login to the docker registry server  # 注册或者登陆一个 docker 源服务器
logout  Log out from a Docker registry server        # 从当前 Docker registry 退出
logs    Fetch the logs of a container               # 输出当前容器日志信息
port    Lookup the public-facing port which is NAT-ed to PRIVATE_PORT  # 查看映射端口对应的容器内部源端口
pause   Pause all processes within a container      # 暂停容器
ps      List containers                             # 列出容器列表
pull    Pull an image or a repository from the docker registry server # 从docker镜像源服务器拉取指定镜像或者库镜像
push    Push an image or a repository to the docker registry server  # 推送指定镜像或者库镜像至docker源服务器
restart Restart a running container                 # 重启运行的容器
rm      Remove one or more containers               # 移除一个或者多个容器
rmi     Remove one or more images           # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]
run     Run a command in a new container            # 创建一个新的容器并运行一个命令
save    Save an image to a tar archive              # 保存一个镜像为一个 tar 包[对应 load]
search  Search for an image on the Docker Hub       # 在 docker hub 中搜索镜像
start   Start a stopped containers                  # 启动容器
stop    Stop a running containers                   # 停止容器
tag     Tag an image into a repository              # 给源中镜像打标签
top     Lookup the running processes of a container # 查看容器中运行的进程信息
unpause Unpause a paused container                  # 取消暂停容器
version Show the docker version information         # 查看 docker 版本号
wait    Block until a container stops, then print its exit code # 截取容器停止时的退出状态值




===================镜像commit===================
docker commit -m=“提交的描述信息” -a=“作者” 容器ID 要创建的目标镜像名:[标签名]

案例演示
docker run -it -p 8888:8080 tomcat
docker exec -it 6dfe036fddae /bin/bash
docker commit -a="zhangwei" -m="del tomcat docs" 6dfe036fddae atguigu/tomcat02:1.2
docker run -d -p 8888:8080 tomcat   后台静默启动运行



===================容器数据卷===================
【方式一】：dcoker命令添加数据卷

第1种 [不带权限]共享数据卷
docker run -it -v /宿主机绝对路径目录:/容器内目录      镜像名
docker run -it -v /myDataVolume:/dataVolumeContainer   centos
docker inspect 4347dd3bac7e
此时宿主主机&&容器已共享文件夹

第2种 [带权限]共享数据卷， 容器只读
docker run -it -v /宿主机绝对路径目录:/容器内目录:ro   镜像名
docker run -it -v /myDataVolume:/dataVolumeContainer:ro centos


【方式二】：DockerFile 添加数据卷
mkdir mydocker
cd mydocker
vim DockerFile

复制并粘贴下面内容：
FROM centos
VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]
CMD echo "finished,--------success1"
CMD /bin/bash

构建镜像，如下内容：（文件名必须是Dockerfile，其次命令结尾是【.】）
docker build -f /mydocker/Dockerfile -t zhangwei/centos .

注意：：：：：
Docker挂载主机目录Docker访问出现
cannot open directory .: Permission denied
解决办法：在挂载目录后多加一个 【--privileged=true】 参数即可

查看自定义镜像数据卷默认地址
docker inspect 容器ID


【数据卷 volumnes-from 数据卷传递】
docker run  -it --name dc01  zhangwei/centos
docker run  -it --name dc02 --volumes-from dc01  zhangwei/centos
docker run  -it --name dc03 --volumes-from dc01  zhangwei/centos

docker rm -f dc01 父数据卷消毁，子数据卷，数据继续存在

结论：：：：：
容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止



===================DockerFile===================
FROM        基础镜像，当前新镜像是基于哪个镜像的
MAINTAINER  镜像维护者的姓名和邮箱地址
RUN    		容器构建时需要运行的命令
EXPOSE 		当前容器对外暴露出的端口
WORKDIR 	指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点
ENV  		用来在构建镜像过程中设置环境变量
ADD  		将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包
COPY 		类似ADD，拷贝文件和目录到镜像中。将从构建上下文
			目录中 <源路径> 的文件/目录复制到新的一层的镜像内的 <目标路径> 位置
VOLUME 		容器数据卷，用于数据保存和持久化工作
CMD  		指定一个容器启动时要运行的命令
			Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换
ENTRYPOINT  指定一个容器启动时要运行的命令
			ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数
ONBUILD 	当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发


案例：
FROM centos
MAINTAINER zhangwei<245370344@qq.com>

ENV MYPATH /usr/local
WORKDIR $MYPATH

RUN yum -y install vim
RUN yum -y install net-tools

EXPOSE 80

CMD echo $MYPATH
CMD echo "success--------------ok"
CMD /bin/bash

docker build -t 新镜像名字:TAG .
docker build -f /mydocker/dockerfile2 -t mycentos:1.3 .

docker images mycentos
docker history 6014d6546d2a


yum install curl

FROM centosRUN yum install -y curl
CMD [ "curl", "-s", "http://ip.cn" ]

FROM centosRUN yum install -y curl
ENTRYPOINT [ "curl", "-s", "http://ip.cn" ]

总结：：：
CMD        会覆盖
ENTRYPOINT 会追加


ONBUILD RUN echo '父镜像被子镜像继续后build时执行'

案例：
FROM       centos
MAINTAINER  zzyy<zzyybs@126.com>
#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下
COPY c.txt /usr/local/cincontainer.txt
#把java与tomcat添加到容器中
ADD jdk-8u171-linux-x64.tar.gz /usr/local/
ADD apache-tomcat-9.0.8.tar.gz /usr/local/
#安装vim编辑器
RUN yum -y install vim
#设置工作访问时候的WORKDIR路径，登录落脚点
ENV MYPATH /usr/local
WORKDIR $MYPATH
#配置java与tomcat环境变量
ENV JAVA_HOME /usr/local/jdk1.8.0_171
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8
ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin
#容器运行时监听的端口
EXPOSE 8080
#启动时运行tomcat
# ENTRYPOINT ["/usr/local/apache-tomcat-9.0.8/bin/startup.sh" ]
# CMD ["/usr/local/apache-tomcat-9.0.8/bin/catalina.sh","run"]
CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out
 
 
docker run -d -p 9080:8080 --name myt9 
-v /zzyyuse/mydockerfile/tomcat9/test:/usr/local/apache-tomcat-9.0.8/webapps/test 
-v /zzyyuse/mydockerfile/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.8/logs 
--privileged=true 
zzyytomcat9






===================自定义的tomcat9上发布演示======================
思想就是：
用dockerfile编写镜像，然后build成image
运行run 起来，此时已经在run时启动配置有容器数据卷，在宿主机放文件，即等同
去容器里发布指定项目，通过exec -it 还可以调用容器centos里的命令
查看容器卷共享日志，或者发布指定项目，jar && war 爽歪歪
运行不爽还可以，commit提交新的tag
最后push到阿里云上面云
完美


=========================Docker常用安装===========================
【docker pull mysql:5.6】

docker run -p 3307:3306 --name zw_mysql
-v /zhangwei/mysql/conf:/etc/mysql/conf.d 
-v /zhangwei/mysql/logs:/logs 
-v /zhangwei/mysql/data:/var/lib/mysql 
-e MYSQL_ROOT_PASSWORD=jzbr
-d mysql:5.6
 
命令说明：
-p 12345:3306：将主机的12345端口映射到docker容器的3306端口。
--name mysql：运行服务名字
-v /zzyyuse/mysql/conf:/etc/mysql/conf.d ：将主机/zzyyuse/mysql录下的conf/my.cnf 挂载到容器的 /etc/mysql/conf.d
-v /zzyyuse/mysql/logs:/logs：将主机/zzyyuse/mysql目录下的 logs 目录挂载到容器的 /logs。
-v /zzyyuse/mysql/data:/var/lib/mysql ：将主机/zzyyuse/mysql目录下的data目录挂载到容器的 /var/lib/mysql 
-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。
-d mysql:5.6 : 后台程序运行mysql5.6
 
 
docker exec -it MySQL运行成功后的容器ID   /bin/bash

容器Mysql数据备份到宿主主机
docker exec myql服务容器ID sh -c ' exec mysqldump --all-databases -uroot -p"123456" ' > /zzyyuse/all-databases.sql


【docker pull redis:3.2】
docker run -p 6379:6379 
-v /zzyyuse/myredis/data:/data 
-v /zzyyuse/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf 
-d redis:3.2 redis-server /usr/local/etc/redis/redis.conf 
--appendonly yes



=========================Docker镜像推送到阿里云===========================
docker run -it mycentos:1.3
docker commit -a zhangweis -m "zhangwei test 1.4" a9c18248cbb3 mycentos:1.4
https://home.console.aliyun.com/new?spm=5176.8142029.388261.3.60816d3eFqzSDE#/
创建镜像仓库---本地仓库并提交

【1. 登录阿里云Docker Registry】
$ sudo docker login --username=13545629757 registry.cn-hangzhou.aliyuncs.com

用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。
您可以在产品控制台首页修改登录密码。

【2. 从Registry中拉取镜像】
$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/zhangwei9757/my_images_repository:[镜像版本号]

【3. 将镜像推送到Registry】
$ sudo docker login --username=13545629757 registry.cn-hangzhou.aliyuncs.com
$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/zhangwei9757/my_images_repository:[镜像版本号]
$ sudo docker push registry.cn-hangzhou.aliyuncs.com/zhangwei9757/my_images_repository:[镜像版本号]

请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。

4. 选择合适的镜像仓库地址
从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。

如果您使用的机器位于经典网络，请使用 registry-internal.cn-hangzhou.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。
如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-hangzhou.aliyuncs.com 作为Registry的域名登录，并作为镜像命名空间前缀。
5. 示例
使用"docker tag"命令重命名镜像，并将它通过专有网络地址推送至Registry。

$ sudo docker images
REPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
registry.aliyuncs.com/acs/agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB
$ sudo docker tag 37bb9c63c8b2 registry-vpc.cn-hangzhou.aliyuncs.com/acs/agent:0.7-dfb6816
使用"docker images"命令找到镜像，将该镜像名称中的域名部分变更为Registry专有网络地址。

$ sudo docker push registry-vpc.cn-hangzhou.aliyuncs.com/acs/agent:0.7-dfb6816
